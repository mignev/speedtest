function url_sep(t) { return t.match(/\?/) ? '&' : '?'; } function clearRequests() {
  if (xhr) {
    for (let t = 0; t < xhr.length; t++) {
      if (useFetchAPI) {
        try { xhr[t].cancelRequested = !0; }
        catch (e) {}
      } try { xhr[t].onprogress = null, xhr[t].onload = null, xhr[t].onerror = null; }
      catch (e) {} try { xhr[t].upload.onprogress = null, xhr[t].upload.onload = null, xhr[t].upload.onerror = null; }
      catch (e) {} try { xhr[t].abort(); }
      catch (e) {} try { delete xhr[t]; }
      catch (e) {}
    }xhr = null;
  }
} function getIp(t) { return settings.url_getIp == '-1' ? void t() : (xhr = new XMLHttpRequest(), xhr.onload = function () { clientIp = xhr.responseText, t(); }, xhr.onerror = function () { t(); }, xhr.open('GET', `${settings.url_getIp + url_sep(settings.url_getIp)}r=${Math.random()}`, !0), void xhr.send()); } function dlTest(t) {
  if (!dlCalled) {
    if (dlCalled = !0, settings.url_dl == '-1') return void t(); let e = 0,
      r = (new Date()).getTime(),
      n = !1,
      i = !1; xhr = []; for (var s = function (t, r) {
          setTimeout(() => {
            if (testStatus === 1) {
              let r = 0,
                n = new XMLHttpRequest(); xhr[t] = n, xhr[t].onprogress = function (t) {
                  if (testStatus !== 1) {
                   try { n.abort(); }
                   catch (i) {}
                 } const s = t.loaded <= 0 ? 0 : t.loaded - r; isNaN(s) || !isFinite(s) || s < 0 || (e += s, r = t.loaded);
                }, xhr[t].onload = function () {
                 try { xhr[t].abort(); }
                 catch (e) {}s(t, 0);
               }, xhr[t].onerror = function () {
               settings.xhr_ignoreErrors === 0 && (i = !0); try { xhr[t].abort(); }
               catch (e) {} delete xhr[t], settings.xhr_ignoreErrors === 1 && s(t, 100);
             }; try { settings.xhr_dlUseBlob ? xhr[t].responseType = 'blob' : xhr[t].responseType = 'arraybuffer'; }
              catch (a) {}xhr[t].open('GET', `${settings.url_dl + url_sep(settings.url_dl)}r=${Math.random()}&ckSize=${settings.garbagePhp_chunkSize}`, !0), xhr[t].send();
            }
          }, 1 + r);
        }, a = 0; a < settings.xhr_dlMultistream; a++)s(a, 100 * a); interval = setInterval(() => {
          const s = (new Date()).getTime() - r; if (!(s < 200)) {
            if (n) { const a = e / (s / 1e3); dlStatus = (8 * a * settings.overheadCompensationFactor / 1048576).toFixed(2), (s / 1e3 > settings.time_dl && dlStatus > 0 || i) && ((i || isNaN(dlStatus)) && (dlStatus = 'Fail'), clearRequests(), clearInterval(interval), t()); }
            else s > 1e3 * settings.time_dlGraceTime && (e > 0 && (r = (new Date()).getTime(), e = 0), n = !0);
          }
        }, 200);
  }
} function ulTest(t) {
  if (!ulCalled) {
    if (ulCalled = !0, settings.url_ul == '-1') return void t(); let e = 0,
      r = (new Date()).getTime(),
      n = !1,
      i = !1; xhr = []; for (var s = function (t, r) {
          setTimeout(() => {
            if (testStatus === 3) {
              let r = 0,
                n = new XMLHttpRequest(); xhr[t] = n; let a; try { xhr[t].upload.onprogress, a = !1; }
              catch (l) { a = !0; }a ? (xhr[t].onload = function () { e += 262144, s(t, 0); }, xhr[t].onerror = function () {
                settings.xhr_ignoreErrors === 0 && (i = !0); try { xhr[t].abort(); }
                catch (e) {} delete xhr[t], settings.xhr_ignoreErrors === 1 && s(t, 100);
              }, xhr[t].open('POST', `${settings.url_ul + url_sep(settings.url_ul)}r=${Math.random()}`, !0), xhr[t].setRequestHeader('Content-Encoding', 'identity'), xhr[t].send(reqsmall)) : (xhr[t].upload.onprogress = function (t) {
                if (testStatus !== 3) {
                 try { n.abort(); }
                 catch (i) {}
               } const s = t.loaded <= 0 ? 0 : t.loaded - r; isNaN(s) || !isFinite(s) || s < 0 || (e += s, r = t.loaded);
              }, xhr[t].upload.onload = function () { s(t, 0); }, xhr[t].upload.onerror = function () {
               settings.xhr_ignoreErrors === 0 && (i = !0); try { xhr[t].abort(); }
               catch (e) {} delete xhr[t], settings.xhr_ignoreErrors === 1 && s(t, 100);
             }, xhr[t].open('POST', `${settings.url_ul + url_sep(settings.url_ul)}r=${Math.random()}`, !0), xhr[t].setRequestHeader('Content-Encoding', 'identity'), xhr[t].send(req));
            }
          }, 1);
        }, a = 0; a < settings.xhr_ulMultistream; a++)s(a, 100 * a); interval = setInterval(() => {
          const s = (new Date()).getTime() - r; if (!(s < 200)) {
            if (n) { const a = e / (s / 1e3); ulStatus = (8 * a * settings.overheadCompensationFactor / 1048576).toFixed(2), (s / 1e3 > settings.time_ul && ulStatus > 0 || i) && ((i || isNaN(ulStatus)) && (ulStatus = 'Fail'), clearRequests(), clearInterval(interval), t()); }
            else s > 1e3 * settings.time_ulGraceTime && (e > 0 && (r = (new Date()).getTime(), e = 0), n = !0);
          }
        }, 200);
  }
} function pingTest(t) {
  if (!ptCalled) {
    if (ptCalled = !0, settings.url_ping == '-1') return void t(); let e = null,
      r = 0,
      n = 0,
      i = 0,
      s = 0; xhr = []; var a = function () {
        e = (new Date()).getTime(), xhr[0] = new XMLHttpRequest(), xhr[0].onload = function () {
          if (i === 0)e = (new Date()).getTime(); else {
            let l = (new Date()).getTime() - e,
              u = Math.abs(l - s); i === 1 ? r = l : (r = 0.9 * r + 0.1 * l, n = u > n ? 0.2 * n + 0.8 * u : 0.9 * n + 0.1 * u), s = l;
          }pingStatus = r.toFixed(2), jitterStatus = n.toFixed(2), i++, i < settings.count_ping ? a() : t();
        }, xhr[0].onerror = function () { settings.xhr_ignoreErrors === 0 && (pingStatus = 'Fail', jitterStatus = 'Fail', clearRequests(), t()), settings.xhr_ignoreErrors === 1 && a(), settings.xhr_ignoreErrors === 2 && (i++, i < settings.count_ping ? a() : t()); }, xhr[0].open('GET', `${settings.url_ping + url_sep(settings.url_ping)}r=${Math.random()}`, !0), xhr[0].send();
      }; a();
  }
} var testStatus = 0,
  dlStatus = '',
  ulStatus = '',
  pingStatus = '',
  jitterStatus = '',
  clientIp = '',
  settings = { time_ul: 15, time_dl: 15, time_ulGraceTime: 3, time_dlGraceTime: 1.5, count_ping: 35, url_dl: 'garbage.php', url_ul: 'empty.php', url_ping: 'empty.php', url_getIp: 'https://api.ipify.org/', xhr_dlMultistream: 10, xhr_ulMultistream: 3, xhr_ignoreErrors: 1, xhr_dlUseBlob: !1, garbagePhp_chunkSize: 20, enable_quirks: !0, overheadCompensationFactor: 1048576 / 925e3 },
  xhr = null,
  interval = null,
  useFetchAPI = !1; this.addEventListener('message', (t) => {
    const e = t.data.split(' '); if (e[0] === 'status' && postMessage(`${testStatus};${dlStatus};${ulStatus};${pingStatus};${clientIp};${jitterStatus}`), e[0] === 'start' && testStatus === 0) {
      testStatus = 1; try {
        let r = {}; try { const n = t.data.substring(5); n && (r = JSON.parse(n)); }
        catch (t) { console.warn('Error parsing custom settings JSON. Please check your syntax'); } if (typeof r.url_dl !== 'undefined' && (settings.url_dl = r.url_dl), typeof r.url_ul !== 'undefined' && (settings.url_ul = r.url_ul), typeof r.url_ping !== 'undefined' && (settings.url_ping = r.url_ping), typeof r.url_getIp !== 'undefined' && (settings.url_getIp = r.url_getIp), typeof r.time_dl !== 'undefined' && (settings.time_dl = r.time_dl), typeof r.time_ul !== 'undefined' && (settings.time_ul = r.time_ul), typeof r.enable_quirks !== 'undefined' && (settings.enable_quirks = r.enable_quirks), settings.enable_quirks) { const i = navigator.userAgent; /Firefox.(\d+\.\d+)/i.test(i) && (settings.xhr_ulMultistream = 1), /Edge.(\d+\.\d+)/i.test(i) && (settings.xhr_dlMultistream = 3), /Chrome.(\d+)/i.test(i) && self.fetch && (settings.xhr_dlMultistream = 5); } typeof r.count_ping !== 'undefined' && (settings.count_ping = r.count_ping), typeof r.xhr_dlMultistream !== 'undefined' && (settings.xhr_dlMultistream = r.xhr_dlMultistream), typeof r.xhr_ulMultistream !== 'undefined' && (settings.xhr_ulMultistream = r.xhr_ulMultistream), typeof r.xhr_ignoreErrors !== 'undefined' && (settings.xhr_ignoreErrors = r.xhr_ignoreErrors), typeof r.xhr_dlUseBlob !== 'undefined' && (settings.xhr_dlUseBlob = r.xhr_dlUseBlob), typeof r.garbagePhp_chunkSize !== 'undefined' && (settings.garbagePhp_chunkSize = r.garbagePhp_chunkSize), typeof r.time_dlGraceTime !== 'undefined' && (settings.time_dlGraceTime = r.time_dlGraceTime), typeof r.time_ulGraceTime !== 'undefined' && (settings.time_ulGraceTime = r.time_ulGraceTime), typeof r.overheadCompensationFactor !== 'undefined' && (settings.overheadCompensationFactor = r.overheadCompensationFactor);
      }
      catch (t) { console.warn(`Possible error in custom test settings. Some settings may not be applied. Exception: ${t}`); }console.log(settings), getIp(() => { dlTest(() => { testStatus = 2, pingTest(() => { testStatus = 3, ulTest(() => { testStatus = 4; }); }); }); });
    }e[0] === 'abort' && (clearRequests(), interval && clearInterval(interval), testStatus = 5, dlStatus = '', ulStatus = '', pingStatus = '', jitterStatus = '');
  }); var dlCalled = !1,
    r = new ArrayBuffer(1048576); try { r = new Float32Array(r); for (var i = 0; i < r.length; i++)r[i] = Math.random(); }
catch (e) {} for (var req = [], reqsmall = [], i = 0; i < 20; i++)req.push(r); req = new Blob(req), r = new ArrayBuffer(262144); try { r = new Float32Array(r); for (var i = 0; i < r.length; i++)r[i] = Math.random(); }
catch (e) {}reqsmall.push(r), reqsmall = new Blob(reqsmall); var ulCalled = !1,
  ptCalled = !1;
